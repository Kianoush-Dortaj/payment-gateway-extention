{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqGG;;;AAEH,4CAA4C;AAC5C,EAAE;AACF,yEAAyE;AACzE,6EAA6E;AAC7E,uEAAuE;AACvE,4EAA4E;AAC5E,0EAA0E;AAC1E,+EAA+E;AAC/E,uEAAuE;AACvE,uEAAuE;AACvE,2EAA2E;AAC3E,wEAAwE;AACxE,WAAW;AAEX;;GAEG;AACU,QAAA,cAAc,GAAG,oCAAoC,CAAA","sourcesContent":["/**\n *\n * This module contains the types and explanations of the communication\n * protocol between the JavaScript code embedded in a web page and the\n * substrate-connect extension.\n *\n * # Overview\n *\n * If a web page wants to use the features of the substrate-connect extension,\n * it must first check whether the extension is available by checking whether\n * there exists an element on the DOM whose `id` is equal to\n * {@link DOM_ELEMENT_ID}. This DOM element is automatically inserted by\n * the extension when the page loads.\n *\n * If so, the web page can make use of the extension by sending messages on\n * its `window` by using `Window.postMessage`. These messages must conform to\n * the {@link ToExtension} interface defined below.\n *\n * The substrate-connect extension (more precisely, its content-script) listens\n * for \"message\" events (using `window.addEventListener(\"message\", ...)`) and\n * replies by sending back messages using `Window.postMessage` as well. The\n * messages sent by the extension conform to the {@link ToApplication}\n * interface defined below.\n *\n * # Detailed usage\n *\n * In order to ask the substrate-connect extension to connect to a certain\n * chain, the web page must:\n *\n * - Randomly generate the so-called `chainId`, a string that will be used\n * to identify this specific chain connection during its lifetime. At least\n * 48 bits of entropy are recommended in order to avoid accidentally\n * generating the same string multiple times.\n * - Send a {@link ToExtensionAddChain} message (using `Window.postMessage`,\n * as explained in the previous section) containing this `chainid` and the\n * specification of the chain to connect to.\n *\n * Instead of a {@link ToExtensionAddChain} message, the web page can\n * alternatively send a {@link ToExtensionAddWellKnownChain} message and pass\n * a chain name recognized by the extension such as \"polkadot\" or \"ksmcc3\", in\n * which case the extension will use the chain specification stored internally.\n * Doing so provides multiple advantages such as less bandwidth usage (as the\n * web page doesn't have to download the chain specification), and a faster\n * initialization as the extension is most likely already connected to that\n * chain.\n *\n * After a {@link ToExtensionAddChain} or a\n * {@link ToExtensionAddWellKnownChain} message has been sent, the extension\n * starts connecting to the chain, and later replies by sending back a\n * {@link ToApplicationChainReady} message in case of success, or a\n * {@link ToApplicationError} message in case of failure. This reply might\n * only be sent back after a few seconds or more, and the web page is\n * encouraged to display some kind of loading screen in the meanwhile.\n *\n * Note that the extension reserves the rights to stop supporting a chain that\n * used to be recognized by {@link ToExtensionAddWellKnownChain}. If the web\n * page has sent a {@link ToExtensionAddWellKnownChain} and receives back a\n * {@link ToApplicationError}, it should automatically fall back to\n * downloading the chain specification and sending a\n * {@link ToExtensionAddChain} instead.\n *\n * After a chain has been successfully initialized (i.e. a\n * {@link ToApplicationChainReady} message has been sent to the web page), the\n * web page can submit JSON-RPC requests and notifications to the chain client\n * by sending {@link ToExtensionRpc} messages. The chain client sends back\n * JSON-RPC responses and notifications using {@link ToApplicationRpc}\n * messages.\n *\n * Once a web page no longer wants to interface with a certain chain, it should\n * send a {@link ToExtensionRemoveChain} message to the extension in order for\n * resources to be de-allocated. This can also be done before a\n * {@link ToApplicationChainReady} message has been sent back.\n *\n * At any point in time after the chain has been initialized, the extension\n * can send a {@link ToApplicationError} message to indicate a critical problem\n * with the chain or the extension that prevents execution from continuing.\n * This can include for example the extension being disabled by the user, the\n * underlying client crashing, an internal error, etc. Contrary to\n * {@link ToApplicationError} messages *before* a chain has been initialized,\n * {@link ToApplicationError} messages that happen *after* a chain has been\n * initialized are rare and serious. If that happens, the web page is\n * encouraged to remove all of its existing chains and stop using the extension\n * altogether.\n *\n * Note that if the extension sends a {@link ToApplicationError} message,\n * either before of after the chain is ready, the corresponding `chainId` is\n * immediately considered dead/removed, and the web page doesn't need to send\n * a {@link ToExtensionRemoveChain} message.\n *\n * # Other extensions implementing this protocol\n *\n * While the documentation above refers to the substrate-connect extension in\n * particular, any other browser extension is free to implement this protocol\n * in order to pretend to be the substrate-connect extension.\n *\n * In order to avoid conflicts when multiple different extensions implement\n * this protocol, extensions must check whether there already exists an element\n * on the DOM whose `id` is equal to {@link DOM_ELEMENT_ID} before\n * creating one and listening for events.\n *\n * @packageDocumentation\n */\n\n// READ THIS BEFORE MODIFYING ANYTHING BELOW\n//\n// This file contains the communication protocol between the web page and\n// extension. If you modify it, existing web pages will still continue to use\n// the previous version until they upgrade, which can take a long time.\n// Similarly, some users will still have versions of the extension installed\n// that use of the previous version of this protocol. If the modifications\n// to this protocol aren't done carefully, web pages might no longer being able\n// to talk to the extension, or worse: try to talk to the extension and\n// throw exceptions because their assumptions are violated. As such, be\n// extremely careful when doing modifications: either the modifications are\n// completely backwards-compatible, or an upgrade path must be carefully\n// planned.\n\n/**\n * `id` of the DOM elemeent automatically inserted by the extension when a web page loads.\n */\nexport const DOM_ELEMENT_ID = \"substrateConnectExtensionAvailable\"\n\n/**\n * Messages sent by the extension always conform to this interface.\n */\nexport type ToApplication = ToApplicationHeader &\n  (ToApplicationError | ToApplicationChainReady | ToApplicationRpc)\n\n/**\n * Header present in all messages sent by the extension.\n */\nexport interface ToApplicationHeader {\n  /**\n   * Messages sent by the extension are sent on the `window`, alongside with potentially\n   * other messages that might be completely unrelated to substrate-connect. This `origin` field\n   * indicates that this message indeed comes from the substrate-connect extension.\n   */\n  origin: \"substrate-connect-extension\"\n}\n\n/**\n * Indicates that the given chain connection has encountered an error and can no longer continue.\n *\n * The chain is automatically considered as \"dead\". No {@link ToExtensionRemoveChain} message\n * needs to be sent.\n *\n * This message can happen either before or after a {@link ToApplicationChainReady} concerning\n * this chain has been sent.\n */\nexport interface ToApplicationError {\n  type: \"error\"\n  chainId: string\n\n  /**\n   * Human-readable message indicating the problem that happened.\n   *\n   * Note that, while this message is readable by a human, it is not meant to be displayed to\n   * end users. The message itself can be rather cryptic, and is meant for developers to\n   * understand the problem that happened.\n   */\n  errorMessage: string\n}\n\n/**\n * Sent in response to a {@link ToExtensionAddChain} or {@link ToExtensionAddWellKnownChain}\n * message. Indicates that the given chain has a valid chain specification or name and is ready\n * to receive JSON-RPC requests.\n *\n * No {@link ToExtensionRpc} message must be sent before this message has been received.\n */\nexport interface ToApplicationChainReady {\n  type: \"chain-ready\"\n  chainId: string\n}\n\n/**\n * JSON-RPC response or notification sent by the substrate-connect extension.\n */\nexport interface ToApplicationRpc {\n  type: \"rpc\"\n  chainId: string\n  jsonRpcMessage: string\n}\n\n/**\n * Messages destined to the extension must conform to this interface.\n */\nexport type ToExtension = ToExtensionHeader &\n  (\n    | ToExtensionAddChain\n    | ToExtensionAddWellKnownChain\n    | ToExtensionRpc\n    | ToExtensionRemoveChain\n  )\n\n/**\n * Header present in all messages destined to the extension.\n */\nexport interface ToExtensionHeader {\n  /**\n   * Messages destined to the extension are sent on the `window`, alongside with potentially\n   * other messages that might be completely unrelated to substrate-connect. This `origin` field\n   * indicates to the substrate-connect extension that this message is destined to it.\n   */\n  origin: \"substrate-connect-client\"\n}\n\n/**\n * Ask the extension to add a new connection to the chain with the given specification.\n */\nexport interface ToExtensionAddChain {\n  type: \"add-chain\"\n\n  /**\n   * Identifier for this chain used in all future messages concerning this chain. Allocated by\n   * the sender of this message. It is recommended to generate this ID randomly, with at least\n   * 48 bits of entropy.\n   */\n  chainId: string\n\n  /**\n   * JSON document containing the specification of the chain.\n   *\n   * See the Substrate documentation for more information about the fields.\n   *\n   * Note that this specification is fully trusted. If an attacker can somehow alter this\n   * specification, they can redirect the connection to a fake chain controlled by this attacker.\n   * In other words, the role of the substrate-connect extension is to connect to the chain whose\n   * specification is provided here, but not to have an opinion on whether this specification is\n   * legitimate.\n   */\n  chainSpec: string\n\n  /**\n   * List of `chainId`s of all chains that are part of the same trusted sandbox as the provided\n   * chain specification.\n   *\n   * Set this to the list of all chains that are currently alive.\n   *\n   * If one of the chains isn't known by the extension, it gets silently removed from the array.\n   * This is necessary in order to avoid race conditions, as the extension might have sent a\n   * {@link ToApplicationError} message at the same time as this message has been sent.\n   */\n  potentialRelayChainIds: string[]\n}\n\n/**\n * Ask the extension to add a new connection to the chain of the given name.\n *\n * The substrate-connect extension comes with some hardcoded chain names that applications can\n * connect to. This list of names isn't indicated here, as it can change over time.\n *\n * Because the extension reserves the right to remove support for a well-known chain in the future,\n * applications should fall back to {@link ToExtensionAddChain} if this well-known chain\n * connection fails.\n */\nexport interface ToExtensionAddWellKnownChain {\n  type: \"add-well-known-chain\"\n\n  /**\n   * Identifier for this chain used in all future messages concerning this chain. Allocated by\n   * the sender of this message. It is recommended to generate this ID randomly, with at least\n   * 48 bits of entropy.\n   */\n  chainId: string\n\n  /**\n   * Name of the chain to connect to.\n   */\n  chainName: string\n}\n\n/**\n * Send a JSON-RPC request concerning the given chain.\n *\n * Must not be sent before a {@link ToApplicationChainReady} message has been received.\n *\n * If the chain isn't known by the extension, this message is silently discarded. This is\n * necessary in order to avoid race conditions, as the extension might have sent a\n * {@link ToApplicationError} message at the same time as this message has been sent.\n *\n * If the JSON-RPC request is malformed (i.e. not valid JSON, or missing the mandatory field of a\n * request), it is silently ignored. While it wouldn't be a bad idea to provide feedback about this\n * problem, doing so would considerably complicate the problem, which isn't worth the trade-off.\n */\nexport interface ToExtensionRpc {\n  type: \"rpc\"\n  chainId: string\n  jsonRpcMessage: string\n}\n\n/**\n * Destroy the given chain.\n *\n * Applications are strongly encouraged to send this message when they don't need the given chain\n * anymore.\n *\n * If the chain isn't known by the extension, this message is silently discarded. This is\n * necessary in order to avoid race conditions, as the extension might have sent a\n * {@link ToApplicationError} message at the same time as this message has been sent.\n */\nexport interface ToExtensionRemoveChain {\n  type: \"remove-chain\"\n  chainId: string\n}\n"]}